# Define service directory
$serviceDir = "dossier-medical-service"
$srcDir = "$serviceDir\src"
$protoDir = "$serviceDir\proto"
$middlewareDir = "$srcDir\middleware"
$servicesDir = "$srcDir\services"
$configDir = "$srcDir\config"

# Create necessary directories
New-Item -ItemType Directory -Path $serviceDir -Force
New-Item -ItemType Directory -Path $srcDir -Force
New-Item -ItemType Directory -Path $protoDir -Force
New-Item -ItemType Directory -Path $middlewareDir -Force
New-Item -ItemType Directory -Path $servicesDir -Force
New-Item -ItemType Directory -Path $configDir -Force

# Initialize Node.js project
Set-Location -Path $serviceDir
npm init -y

# Install dependencies
npm install express grpc @grpc/grpc-js @grpc/proto-loader jsonwebtoken dotenv mysql

# Create .env file
@"
JWT_SECRET=your_secret_key
DB_HOST=localhost
DB_USER=root
DB_PASS=password
DB_NAME=myheart_dossier
PORT=5003
"@ | Set-Content ".env"

# Create proto file for gRPC
@"
syntax = "proto3";

service DossierMedicalService {
  rpc CreateDossier (DossierRequest) returns (DossierResponse);
  rpc GetDossier (DossierIdRequest) returns (DossierResponse);
  rpc UpdateDossier (DossierRequest) returns (DossierResponse);
  rpc DeleteDossier (DossierIdRequest) returns (DossierResponse);
}

message DossierRequest {
  int32 patient_id = 1;
  string history = 2;
  string allergies = 3;
  string medications = 4;
}

message DossierResponse {
  string message = 1;
  optional int32 dossier_id = 2;
}

message DossierIdRequest {
  int32 patient_id = 1;
}
"@ | Set-Content "$protoDir\dossier_medical.proto"

# Create authentication middleware
@"
const jwt = require("jsonwebtoken");
require("dotenv").config();

function authMiddleware(call, callback, next) {
  const metadata = call.metadata;
  const token = metadata.get("authorization")[0];

  if (!token) {
    return callback({ code: 16, message: "Authentication token required" });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) {
      return callback({ code: 16, message: "Invalid token" });
    }
    call.user = decoded;
    next();
  });
}

module.exports = authMiddleware;
"@ | Set-Content "$middlewareDir\authMiddleware.js"

# Create database connection
@"
const mysql = require("mysql");
require("dotenv").config();

const db = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME
});

db.connect(err => {
  if (err) throw err;
  console.log("Connected to MySQL");
});

module.exports = db;
"@ | Set-Content "$configDir\db.js"

# Create gRPC service implementation
@"
const db = require("../config/db");
const authMiddleware = require("../middleware/authMiddleware");

const dossierMedicalService = {
  CreateDossier: (call, callback) => authMiddleware(call, callback, () => {
    const { patient_id, history, allergies, medications } = call.request;
    const sql = "INSERT INTO dossier_medical (patient_id, history, allergies, medications) VALUES (?, ?, ?, ?)";
    db.query(sql, [patient_id, history, allergies, medications], (err, result) => {
      if (err) callback(err, null);
      else callback(null, { message: "Dossier created", dossier_id: result.insertId });
    });
  }),

  GetDossier: (call, callback) => authMiddleware(call, callback, () => {
    const { patient_id } = call.request;
    const sql = "SELECT * FROM dossier_medical WHERE patient_id = ?";
    db.query(sql, [patient_id], (err, results) => {
      if (err) callback(err, null);
      else callback(null, { dossier: results[0] || null });
    });
  }),

  UpdateDossier: (call, callback) => authMiddleware(call, callback, () => {
    const { patient_id, history, allergies, medications } = call.request;
    const sql = "UPDATE dossier_medical SET history=?, allergies=?, medications=? WHERE patient_id=?";
    db.query(sql, [history, allergies, medications, patient_id], (err, result) => {
      if (err) callback(err, null);
      else callback(null, { message: "Dossier updated" });
    });
  }),

  DeleteDossier: (call, callback) => authMiddleware(call, callback, () => {
    const { patient_id } = call.request;
    const sql = "DELETE FROM dossier_medical WHERE patient_id=?";
    db.query(sql, [patient_id], (err, result) => {
      if (err) callback(err, null);
      else callback(null, { message: "Dossier deleted" });
    });
  }),
};

module.exports = dossierMedicalService;
"@ | Set-Content "$servicesDir\dossierMedical.js"

# Create gRPC server
@"
const grpc = require("@grpc/grpc-js");
const protoLoader = require("@grpc/proto-loader");
const dotenv = require("dotenv");
dotenv.config();

const dossierMedicalService = require("./src/services/dossierMedical");

const packageDefinition = protoLoader.loadSync("./proto/dossier_medical.proto", { keepCase: true });
const dossierMedicalProto = grpc.loadPackageDefinition(packageDefinition).DossierMedicalService;

const server = new grpc.Server();

server.addService(dossierMedicalProto.service, dossierMedicalService);

server.bindAsync(
  `0.0.0.0:${process.env.PORT}`,
  grpc.ServerCredentials.createInsecure(),
  (err, port) => {
    if (err) {
      console.error("Failed to start server:", err);
    } else {
      console.log(`Dossier Médical Service running on port ${port}`);
      server.start();
    }
  }
);
"@ | Set-Content "server.js"

# Return to original directory
Set-Location ..

Write-Host "✅ Dossier Médical Service created successfully! Run 'node server.js' to start the service."
